"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[567],{4892:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>l,frontMatter:()=>s,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"getting-started/extending","title":"Extending JTokkit","description":"You may want to extend JTokkit and re-use its registry to support additional byte pair encodings or even completely custom encodings. To do so you have two options.","source":"@site/docs/getting-started/extending.md","sourceDirName":"getting-started","slug":"/getting-started/extending","permalink":"/docs/getting-started/extending","draft":false,"unlisted":false,"editUrl":"https://github.com/knuddelsgmbh/jtokkit/tree/main/docs/docs/getting-started/extending.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Extending JTokkit","sidebar_position":3},"sidebar":"gettingStarted","previous":{"title":"Usage","permalink":"/docs/getting-started/usage"},"next":{"title":"Counting Tokens for ChatML","permalink":"/docs/getting-started/recipes/chatml"}}');var o=t(4848),r=t(8453);const s={title:"Extending JTokkit",sidebar_position:3},d=void 0,c={},a=[{value:"Implementing the <code>Encoding</code> interface",id:"implementing-the-encoding-interface",level:2},{value:"Adding a new byte pair encoding",id:"adding-a-new-byte-pair-encoding",level:2}];function g(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"You may want to extend JTokkit and re-use its registry to support additional byte pair encodings or even completely custom encodings. To do so you have two options."}),"\n",(0,o.jsxs)(n.h2,{id:"implementing-the-encoding-interface",children:["Implementing the ",(0,o.jsx)(n.code,{children:"Encoding"})," interface"]}),"\n",(0,o.jsxs)(n.p,{children:["Implement the ",(0,o.jsx)(n.code,{children:"Encoding"})," interface and register it with the ",(0,o.jsx)(n.code,{children:"EncodingRegistry"}),". Make sure that the name you return from ",(0,o.jsx)(n.code,{children:"Encoding#getName"})," is unique and that your implementation is thread-safe. It will be cached and reused by the ",(0,o.jsx)(n.code,{children:"EncodingRegistry"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'EncodingRegistry registry = Encodings.newDefaultEncodingRegistry();\nEncoding customEncoding = new CustomEncoding();\nregistry.register(customEncoding);\n\n// Get the encoding from the registry\nEncoding encodingFromRegistry = registry.getEncoding("custom-name");\n'})}),"\n",(0,o.jsx)(n.h2,{id:"adding-a-new-byte-pair-encoding",children:"Adding a new byte pair encoding"}),"\n",(0,o.jsx)(n.p,{children:"You can add a new byte pair encoding by specifying the necessary parameters."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'EncodingRegistry registry = Encodings.newDefaultEncodingRegistry();\nGptBytePairEncodingParams params = new GptBytePairEncodingParams(\n        "custom-name",\n        Pattern.compile("some custom pattern"),\n        encodingMap,\n        specialTokenEncodingMap\n);\nregistry.registerGptBytePairEncoding(params);\n\n// Get the encoding from the registry\nEncoding encodingFromRegistry = registry.getEncoding("custom-name");\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Reference ",(0,o.jsx)(n.code,{children:"EncodingFactory"})," for more details on the parameters and examples on how those parameters are used for the pre-defined encodings."]})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(g,{...e})}):g(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>d});var i=t(6540);const o={},r=i.createContext(o);function s(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);