"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[983],{3905:(e,t,n)=>{n.d(t,{Zo:()=>g,kt:()=>u});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=r.createContext({}),s=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},g=function(e){var t=s(e.components);return r.createElement(d.Provider,{value:t},e.children)},p="mdxType",l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,d=e.parentName,g=c(e,["components","mdxType","originalType","parentName"]),p=s(n),m=i,u=p["".concat(d,".").concat(m)]||p[m]||l[m]||o;return n?r.createElement(u,a(a({ref:t},g),{},{components:n})):r.createElement(u,a({ref:t},g))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=m;var c={};for(var d in t)hasOwnProperty.call(t,d)&&(c[d]=t[d]);c.originalType=e,c[p]="string"==typeof e?e:i,a[1]=c;for(var s=2;s<o;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4338:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>l,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var r=n(7462),i=(n(7294),n(3905));const o={title:"Extending JTokkit",sidebar_position:3},a=void 0,c={unversionedId:"getting-started/extending",id:"getting-started/extending",title:"Extending JTokkit",description:"You may want to extend JTokkit and re-use its registry to support additional byte pair encodings or even completely custom encodings. To do so you have two options.",source:"@site/docs/getting-started/extending.md",sourceDirName:"getting-started",slug:"/getting-started/extending",permalink:"/docs/getting-started/extending",draft:!1,editUrl:"https://github.com/knuddelsgmbh/jtokkit/tree/main/docs/docs/getting-started/extending.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Extending JTokkit",sidebar_position:3},sidebar:"gettingStarted",previous:{title:"Usage",permalink:"/docs/getting-started/usage"},next:{title:"Counting Tokens for ChatML",permalink:"/docs/getting-started/recipes/chatml"}},d={},s=[{value:"Implementing the <code>Encoding</code> interface",id:"implementing-the-encoding-interface",level:2},{value:"Adding a new byte pair encoding",id:"adding-a-new-byte-pair-encoding",level:2}],g={toc:s},p="wrapper";function l(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,r.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"You may want to extend JTokkit and re-use its registry to support additional byte pair encodings or even completely custom encodings. To do so you have two options."),(0,i.kt)("h2",{id:"implementing-the-encoding-interface"},"Implementing the ",(0,i.kt)("inlineCode",{parentName:"h2"},"Encoding")," interface"),(0,i.kt)("p",null,"Implement the ",(0,i.kt)("inlineCode",{parentName:"p"},"Encoding")," interface and register it with the ",(0,i.kt)("inlineCode",{parentName:"p"},"EncodingRegistry"),". Make sure that the name you return from ",(0,i.kt)("inlineCode",{parentName:"p"},"Encoding#getName")," is unique and that your implementation is thread-safe. It will be cached and reused by the ",(0,i.kt)("inlineCode",{parentName:"p"},"EncodingRegistry"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'EncodingRegistry registry = Encodings.newDefaultEncodingRegistry();\nEncoding customEncoding = new CustomEncoding();\nregistry.register(customEncoding);\n\n// Get the encoding from the registry\nEncoding encodingFromRegistry = registry.getEncoding("custom-name");\n')),(0,i.kt)("h2",{id:"adding-a-new-byte-pair-encoding"},"Adding a new byte pair encoding"),(0,i.kt)("p",null,"You can add a new byte pair encoding by specifying the necessary parameters."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'EncodingRegistry registry = Encodings.newDefaultEncodingRegistry();\nGptBytePairEncodingParams params = new GptBytePairEncodingParams(\n        "custom-name",\n        Pattern.compile("some custom pattern"),\n        encodingMap,\n        specialTokenEncodingMap\n);\nregistry.registerGptBytePairEncoding(params);\n\n// Get the encoding from the registry\nEncoding encodingFromRegistry = registry.getEncoding("custom-name");\n')),(0,i.kt)("p",null,"Reference ",(0,i.kt)("inlineCode",{parentName:"p"},"EncodingFactory")," for more details on the parameters and examples on how those parameters are used for the pre-defined encodings."))}l.isMDXComponent=!0}}]);